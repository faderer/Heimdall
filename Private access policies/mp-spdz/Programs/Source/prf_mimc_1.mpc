from Compiler import instructions_base
import sys
import time
from math import ceil
from random import randrange

program.bit_length = 128
nparallel = int(program.args[1])

instructions_base.set_global_vector_size(nparallel)
use_cubes = True
# To disable key-dependent pre-processing set use_cubes=False

# Metadata
#prime = 2061584302081
prime = 67043329
#prime = 7
field_size = len(bin(prime).lstrip('-0b'))

# Helpers
def sample():
    return randrange(prime)

def sample_vec(size):
    return [randrange(prime) for _ in range(size)]

def share(arr):
    mask = sample_vec(len(arr))
    share = [(a - m) % prime for a, m in zip(arr, mask)]
    return mask, share

def to_bits(l, l_bits):
    bit_repr = '{0:0%db}' % (field_size)
    for num in l:
        num_bits = [int(c) for c in bit_repr.format(num)]
        for bit in reversed(num_bits):
            l_bits.append(bit)

def reconstruct_bits(bits):
    """Converts client's bit shares into vectorized integer shares"""
    # Store vectorized bits into Array to allow for indexing
    pow_two = Array.create_from([cint(1 << i) for i in range(field_size)])
    r = sint.Array(layer_size)
    y = sint.Array(layer_size)
     
    @for_range_opt(layer_size)
    def _(i):
        offset = layer_size*field_size
        r_slice = sint.Array(field_size)
        y_slice = sint.Array(field_size)
        # Load bits for element into local array
        @for_range_opt(field_size)
        def _(j):
            r_slice[j] = sint.load_mem(bits.address + i*field_size + j)
            y_slice[j] = sint.load_mem(bits.address + offset + i*field_size + j)
        # Multiply each bit by appropiate power of two
        for bit in range(field_size):
            r_slice[bit] *= pow_two[bit]
            y_slice[bit] *= pow_two[bit]
        # Sum all bits into result
        r[i] = sum(r_slice)
        y[i] = sum(y_slice)
    return r, y

class KDPreprocessing(object):
    """ Generate Key-Dependent Pre-processing """

    def __init__(self, num_calls, rounds):
        rint = VectorArray(num_calls * rounds, sint, nparallel)
        rsquare = VectorArray(num_calls * rounds, sint, nparallel)
        rcube = VectorArray(num_calls * rounds, sint, nparallel)

        self.rounds = rounds
        self.num_calls = num_calls
        self.index = MemValue(regint(0))

        @for_range(num_calls)
        def block(i):
            cur_block = i * rounds
            for r in range(rounds):
                next_block = cur_block + r
                ta1, ta2 = sint.get_random_square()
                rint[next_block] = ta1
                rsquare[next_block] = ta2
                rcube[next_block] = ta1 * ta2

        # [r], [r^2], [r^3]
        self.rint = rint
        self.rsquare = rsquare
        self.rcube = rcube

    def get_material(self, where):
        """ returns [r], [r^2], [r^3] as a pre-processed tuple """
        index = self.index
        target = index * self.rounds + where
        rint = self.rint[target]
        rsquare = self.rsquare[target]
        rcube = self.rcube[target]
        return rint, rsquare, rcube

    def gen_next_pre(self):
        self.index.iadd(1)

    def reset(self):
        self.index.imul(0)

class MiMC(object):
    """ Class for MiMC PRF as described in https://eprint.iacr.org/2016/542 """

    def __init__(self, _rounds, _key, num_calls):
        self.rounds = _rounds
        # Random constants for each round
        self.constants = self.get_rounds_constants()
        self.key = _key
        if use_cubes:
            self.kd_pre = KDPreprocessing(num_calls, self.rounds)

    def get_rounds_constants(self):
        return [sint.get_random_triple()[0].reveal() for i in range(self.rounds)] 

    @vectorize
    def encrypt(self, m):
        key = self.key
        x = m + key

        for r in range(self.rounds):
            if use_cubes:
                a1, a2, a3 = self.kd_pre.get_material(r)
                y = (x - a1).reveal()
                y2 = y**2
                y3 = y * y2
                x3 = 3*(y*a2 + y2*a1) + y3 + a3
                x = x3 + key + self.constants[r]
            else:
                x = x ** 3
                x = x + key + self.constants[r]

        x = x + key
        if use_cubes:
            self.kd_pre.gen_next_pre()
        return x

    def encrypt_clear_to_ss(self, m):
        return self.encrypt(m)

    def encrypt_ss_to_ss(self, m):
        return self.encrypt(m)

    def encrypt_ss_to_clear(self, m):
        return self.encrypt(m).reveal()

    def reset_kd_pre(self):
        self.kd_pre.reset()

depth = 26
forest = 6
# Number of rounds
rounds = 46
# Number of calls to the PRF
num_calls = depth
# Key for the PRF
key = sint.get_input_from(0)
# Message to be encrypted
m = sint.get_input_from(1)


# Create an array to store the results
result = Array(depth, sint)

batch = 10
prf_instance = MiMC(rounds, key, num_calls*batch)
# Create several instance of the MiMC class
for j in range(batch):
    result[0] = prf_instance.encrypt(m)
    for i in range(1,depth):
        # Create a new MiMC instance for each encryption
        # Encrypt the message using the new instance
        result[i] = prf_instance.encrypt(m+result[i-1])
# Explicitly delete the instance to free memory
del prf_instance


# Search public list for private input result[-1]
public_list = [sint(i) for i in range(2**forest)]
eq_bits = [result[-1] == x for x in public_list]
b_in_a = sum(eq_bits)
print_ln("Is result[-1] in public list? %s", b_in_a.reveal())


# Reveal the result
# print_ln("Encrypted result: %s", result.reveal())
# print_ln("Encrypted result2: %s", result2.reveal())

inp = sample_vec(1)
inp_bits = list()
to_bits(inp, inp_bits)

inp_labels_0 = sample_vec(field_size)
inp_labels_1 = sample_vec(field_size)

secure_labels_0 = Array.create_from(map(sint, inp_labels_0))
secure_labels_1 = Array.create_from(map(sint, inp_labels_1))
bits = Array.create_from(map(sint, inp_bits))
g = Array.create_from(map(sint, inp_labels_0))

@for_range_opt(field_size)
def _(i):
    g[i] = (b_in_a).if_else(secure_labels_0[i] + (secure_labels_1[i] - secure_labels_0[i]) * bits[i], sint(0))
    
    
for i in range(field_size):
    print_ln("g[i]: %s", g[i].reveal())
print_ln("(d,f): (%s, %s)", depth, forest)